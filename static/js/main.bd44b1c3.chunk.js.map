{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createArray","len","val","Array","fill","Layer","props","rand","randomSeed","create","this","initState","time","rows","columns","size","verticalSpeed","speed","snowFlakes","snowFlakeElements","map","row","rowIndex","flake","flakeIndex","verticalOffset","length","floatBetween","verticalPosition","horizontalOffset","Math","sin","horizontalPosition","modulo","flakeStyles","position","width","height","borderRadius","left","top","backgroundColor","key","style","flat","background","React","Component","App","state","Date","now","tick","bind","setState","requestAnimationFrame","layers","layerElements","layer","layerIndex","round","overflow","scale","Ground","Tree","transform","boxShadow","borderLeft","borderRight","borderBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd44b1c3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport randomSeed from \"random-seed\";\nimport * as modulo from \"mod-op\";\n\nfunction createArray(len, val) {\n  return Array(len).fill(val);\n}\n\nclass Layer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.rand = randomSeed.create();\n  }\n\n  render() {\n    const rand = this.rand;\n    rand.initState();\n\n    const { time, rows, columns, size, speed } = this.props;\n\n    const verticalSpeed = speed;\n    const verticalAmplitude = 5;\n    const horizontalSpeed = 0.2;\n    const horizontalAmplitude = 2;\n    const horizontalPhase = 1000000;\n    const snowFlakes = createArray(rows, createArray(columns));\n\n    const snowFlakeElements = snowFlakes\n      .map((row, rowIndex) => {\n        return row.map((flake, flakeIndex) => {\n          const verticalOffset =\n            rowIndex * (100 / snowFlakes.length) +\n            rand.floatBetween(-verticalAmplitude, verticalAmplitude);\n          const verticalPosition =\n            ((verticalSpeed * time) / 100 + verticalOffset) % 100;\n          const horizontalOffset =\n            horizontalAmplitude *\n            Math.sin(\n              (horizontalSpeed *\n                (time +\n                  (rowIndex * horizontalPhase) / 100 +\n                  (flakeIndex * horizontalPhase) / 100)) /\n                100\n            );\n          const horizontalPosition = modulo(\n            flakeIndex * (100 / row.length) + horizontalOffset,\n            100\n          );\n\n          const flakeStyles = {\n            position: \"absolute\",\n            width: size,\n            height: size,\n            borderRadius: \"50%\",\n            left: horizontalPosition + \"vw\",\n            top: verticalPosition + \"vh\",\n            backgroundColor: \"white\",\n          };\n\n          return <div key={`${rowIndex}-${flakeIndex}`} style={flakeStyles} />;\n        });\n      })\n      .flat();\n\n    const outerContainerStyles = {\n      width: \"100vw\",\n      height: \"100vh\",\n      background: \"transparent\",\n      position: \"absolute\",\n    };\n\n    return <div style={outerContainerStyles}>{snowFlakeElements}</div>;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      time: Date.now(),\n    };\n\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.tick();\n  }\n\n  tick() {\n    this.setState(\n      {\n        time: Date.now(),\n      },\n      () => requestAnimationFrame(this.tick)\n    );\n  }\n\n  render() {\n    const { time } = this.state;\n\n    const outerContainerStyles = {\n      width: \"100vw\",\n      height: \"100vh\",\n      background: \"linear-gradient(173deg, black, transparent)\",\n      position: \"relative\",\n      overflow: \"hidden\",\n    };\n\n    const layerCount = 5;\n    const size = 1;\n    const layers = createArray(layerCount);\n    const speed = 0.2;\n    const resolution = 20;\n\n    const layerElements = layers.map((layer, layerIndex) => (\n      <Layer\n        key={layerIndex}\n        time={time}\n        speed={speed * (layerIndex + 1)}\n        size={size * (layerIndex + 1)}\n        rows={Math.round(\n          resolution - (layerIndex / (layerCount + 1)) * resolution\n        )}\n        columns={Math.round(\n          resolution - (layerIndex / (layerCount + 1)) * resolution\n        )}\n      />\n    ));\n\n    return (\n      <div style={outerContainerStyles}>\n        <Ground />\n        <Tree left={100} top={100} scale={1.2} />\n        {layerElements}\n      </div>\n    );\n  }\n}\n\nconst Ground = () => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: \"-25vw\",\n        top: \"calc(50vh - 200px)\",\n        width: \"150vw\",\n        height: 340,\n        backgroundColor: \"transparent\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          borderRadius: \"50%\",\n          left: 0,\n          top: 400,\n          width: \"150vw\",\n          height: 800,\n          backgroundColor: \"beige\",\n        }}\n      ></div>\n    </div>\n  );\n}\n\nconst Tree = ({ left = 0, top = 0, scale = 1 }) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: `calc(50vw - ${left}px)`,\n        top: `calc(50vh - ${top}px)`,\n        width: 200,\n        height: 340,\n        backgroundColor: \"transparent\",\n        transform: `scale(${scale})`\n      }}\n    >\n      <div style={{ position: 'relative' }}>\n        <div\n          style={{\n            position: \"absolute\",\n            left: 80,\n            top: 260,\n            boxShadow: \"rgb(0 0 0 / 17%) 0px 15px 10px -15px\",\n            width: 40,\n            height: 40,\n            backgroundColor: \"brown\",\n          }}\n        ></div>\n        <div\n          style={{\n            position: \"absolute\",\n            left: 0,\n            top: 160,\n            boxShadow: \"rgb(0 0 0 / 17%) 0px 15px 10px -15px\",\n            borderLeft: \"100px solid transparent\",\n            borderRight: \"100px solid transparent\",\n            borderBottom: \"100px solid green\",\n            backgroundColor: \"transparent\",\n            width: 0,\n            height: 0,\n          }}\n        ></div>\n        <div\n          style={{\n            position: \"absolute\",\n            left: \"12%\",\n            top: 100,\n            boxShadow: \"rgb(0 0 0 / 17%) 0px 15px 10px -15px\",\n            borderLeft: \"75px solid transparent\",\n            borderRight: \"75px solid transparent\",\n            borderBottom: \"100px solid green\",\n            backgroundColor: \"transparent\",\n            width: 0,\n            height: 0,\n          }}\n        ></div>\n        <div\n          style={{\n            position: \"absolute\",\n            left: \"24%\",\n            top: 40,\n            boxShadow: \"rgb(0 0 0 / 17%) 0px 15px 10px -15px\",\n            borderLeft: \"50px solid transparent\",\n            borderRight: \"50px solid transparent\",\n            borderBottom: \"100px solid green\",\n            backgroundColor: \"transparent\",\n            width: 0,\n            height: 0,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}